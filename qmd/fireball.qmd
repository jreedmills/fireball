---
title: "Fireball"
author: "Jackson Mills"
format:
  html:
    embed-resources: true
    code-fold: true
    toc: true
execute:
  message: false
  warning: false
  eval: true
---

# Introduction

In this exercise, we will create and showcase a function that simulates the "fireball" spell from Dungeons & Dragons. Dungeons & Dragons (DnD) is a tabletop role-playing game that involves rolling dice to determine outcomes in an imagined fantasy-themed adventure. Combat in DnD often involves spells, which can have a variety of effects on the battlefield depending on the outcomes of associated dice rolls. One such spell, fireball, causes a fiery explosion that affects creatures in the target area. When a character casts fireball, the outcome depends on the results of dice rolls, the caster's difficulty class (DC), the affected creatures' damage immunities, resistances or vulnerabilities, and other modifiers. In order to simulate this, we will create three functions:

-   dice_roll(): A function to simulate rolling different types of dice

-   targets(): A function that creates a dataframe of enemies that will be hit by fireball

-   fireball(): A function that simulates dice rolls and resulting fireball damage for each enemy

-   clean_dead(): A function that will remove dead enemies from the battlefield and remove intermediate information

# Libraries

```{r}

library(tidyverse)
library(dplyr)
library(here)


```

# Dice roll function

The dice_roll() function will take two inputs:

-   n = number of dice to be rolled

-   d = number of sides on each dice (possible values)

It will simulate each dice roll and return the result

```{r}
source(here("R", "dice_roll.R"))
```

# Targets function

The targets() function will create a dataframe representing enemies that will be hit by the fireball spell. The resulting dataframe will include information about the enemies as defined by the following inputs:

-   n = the number of unique enemy types

-   HP = health points of each enemy or enemy type

-   proficiency_bonus = a number that increases some dice rolls

-   ability_modifier = a number that increases some dice rolls

-   name = the name of each enemy or enemy type

-   resistances = types of damage the enemy or enemy type is resistant to

-   vulnerabilities = types of damage the enemy or enemy type is vulnerable to

-   immunities = types of damage the enemy or enemy type is immune to

```{r}
source(here("R", "targets.R"))
```

### Inputs

This function will accept single inputs for single enemy types. For example lets make 10 goblins:

```{r}

goblins <- targets(n = 10, 
                   name = "goblin", 
                   HP = 15, 
                   ability_modifier = 2,
                   proficiency_bonus = 0)

knitr::kable(goblins)

```

We can also enter vector inputs if there are multiple enemy types. For example, lets make 10 goblins and 10 orcs, which have different stats:

```{r}

enemies <- targets(n = c(10,10), 
                name = c("goblin", "orc"), 
                ability_modifier = c(2, 1),
                proficiency_bonus = c(0,0),
                HP = c(15, 25))

knitr::kable(enemies)
```

We can see that the different enemy types have different stats, and are named appropriately (goblin 1, goblin 2, goblin 3, etc.).

# Fireball function

Now that we have our enemies, lets create a function to make them explode! The fireball() function will take the following inputs:

-   targets = dataframe of targets that will be hit by fireball

-   DC = the caster's Difficulty Class (higher DC -\> more likely the spell does more damage)

-   spell_lvl = the level that the caster chooses to cast fireball at (higher spell_lvl -\> more damage)

```{r}

source(here("R", "fireball.R"))

```

Let's test our spell on the goblins and orcs we created before.

```{r}

crispy_enemies <- enemies |>
  fireball()

knitr::kable(crispy_enemies)
```

It looks like something happened, but there's a lot of information. Lets make a new function, clean_dead(), to remove dead enemies from the battlefield and clean up the data.

```{r}

source(here("R", "clean_dead.R"))

crispy_enemies <- crispy_enemies |>
  clean_dead()

knitr::kable(crispy_enemies)

```

We can see that there are less enemies than we started with, as some of them were killed by the fireball. Additionally, their HP has been updated according to the damage they took.

Lets create and test fireball on a bunch of enemies with different stats, and plot our results:

```{r}

goblins <- targets(
  n = c(30, 10, 5), 
  HP = c(10, 20, 50), 
  proficiency_bonus = c(1, 0, 0), 
  ability_modifier = c(3, 2, 0),
  name = c("Goblin", "Orc", "Ogre")
) |>
    mutate(army = "Goblin Horde")

demons <- targets(
  n = c(30, 10, 5), 
  HP = c(10, 20, 50), 
  proficiency_bonus = c(0, 1, 0), 
  ability_modifier = c(3, 2, 2),
  name = c("Imp", "Hell Hound", "Demon Lord"),
  resistances = "Fire"
) |>
  mutate(army = "Demonic Legion")

undead <- targets(
  n = c(30, 10, 5),
  HP = c(10, 20, 50),
  proficiency_bonus = c(0, 0, 1),
  ability_modifier = c(0, 0, 2),
  name = c("Zombie", "Ghoul", "Lich")
) |>
  mutate(army = "Undead Swarm")

enemies <- rbind(goblins, demons, undead) |>
  mutate(species = factor(species, levels = c("Goblin", "Orc", "Ogre", "Imp", "Hell Hound", "Demon Lord", "Zombie", "Ghoul", "Lich")),
         army = factor(army, levels = c("Goblin Horde", "Demonic Legion", "Undead Swarm")))

```

```{r}

# Simulate 10,000 fireball scenarios
simulated_fireball <- replicate(1000, fireball(enemies), simplify = FALSE)

# Convert list of dataframes into a single dataframe
fireball_df <- bind_rows(simulated_fireball)

# Summarize the data by name (average damage per enemy)
summarized_fireball <- fireball_df %>%
  group_by(army, species) %>%
  summarise(
    avg_dmg = mean(dmg),
    .groups = 'drop'
  )

# Plot average damage dealt to each target type
ggplot(summarized_fireball, aes(x = species, y = avg_dmg, fill = army)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(
    title = "Average Fireball Damage by Enemy Type (Simulated 10,000 Scenarios)",
    x = "Target",
    y = "Average Damage Taken",
    fill = "Enemy Group"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_manual(values = c("Goblin Horde" = "yellowgreen", "Demonic Legion" = "firebrick", "Undead Swarm" = "thistle4"))


```

```{r}

# Calculate survival probabilities
survival_probabilities <- fireball_df %>%
  group_by(species, army) %>%
  summarise(
    survival_rate = mean(alive),
    .groups = 'drop'
  )

# Plot survival probabilities
ggplot(survival_probabilities, aes(x = species, y = survival_rate, fill = army)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(
    title = "Survival Probability by Enemy Type (Simulated 10,000 Scenarios)",
    x = "Target Species",
    y = "Survival Probability",
    fill = "Enemy Group"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_manual(values = c("Goblin Horde" = "yellowgreen", "Demonic Legion" = "firebrick", "Undead Swarm" = "thistle4"))

```


