---
title: "Fireball"
author:
  - Jackson Mills
  - Wesley Noble
  - Ben Ladabaum
format:
  html:
    embed-resources: true
    code-fold: true
    toc: true
execute:
  message: false
  warning: false
  eval: true
---
#### Links to additional information

D&D Basic Rules: [link](https://media.wizards.com/2018/dnd/downloads/DnD_BasicRules_2018.pdf)

D&D Combat: [link](https://roll20.net/compendium/dnd5e/Combat#content)

D&D Spells: [link](https://roll20.net/compendium/dnd5e/Spells#content)

D&D Monsters: [link](https://roll20.net/compendium/dnd5e/Monsters#content)

Fireball spell: [link](https://roll20.net/compendium/dnd5e/Fireball#content)

# Introduction

In this exercise, we will create and showcase a function that simulates the "fireball" spell from Dungeons & Dragons. Dungeons & Dragons (D&D) is a tabletop role-playing game that involves rolling dice to determine outcomes in an imagined fantasy-themed adventure. Combat in D&D often involves spells, which can have a variety of effects on the battlefield depending on the outcomes of associated dice rolls. One such spell, fireball, causes a fiery explosion that affects creatures in the target area. When a character casts fireball, the outcome depends on 

1) the results of dice rolls, 

2) the caster's difficulty class (DC), 

3) the affected creatures' damage immunities, resistances and/or vulnerabilities, and 

4) other modifiers and/or bonuses. 

In order to simulate this, we will create four functions:

-   dice_roll(): A function to simulate rolling different types of dice

-   targets(): A function that creates a dataframe of enemies that will be hit by fireball

-   fireball(): A function that simulates dice rolls and resulting fireball damage for each enemy

-   clean_dead(): A function that will remove dead enemies from the battlefield and remove intermediate information

# Libraries

```{r}

library(tidyverse)
library(dplyr)
library(here)
library(purrr)

```

# Dice roll function

The dice_roll() function will take two inputs:

-   n = number of dice to be rolled

-   d = number of sides on each dice (possible values)

It will simulate each dice roll and return the result

```{r}
source(here("R", "dice_roll.R"))
```

# Targets function

The targets() function will create a dataframe representing enemies that will be hit by the fireball spell. The resulting dataframe will include information about the enemies as defined by the following inputs:

-   n = number of enemies per enemy type

-   HP = health points of each enemy or enemy type

-   proficiency_bonus = a number added to some dice rolls

-   ability_modifier = a number added to some dice rolls

-   name = the name of each enemy or enemy type

-   resistances = types of damage the enemy or enemy type is resistant to

-   vulnerabilities = types of damage the enemy or enemy type is vulnerable to

-   immunities = types of damage the enemy or enemy type is immune to

```{r}
source(here("R", "targets.R"))
```

### Single inputs

This function will accept single inputs for single enemy types. For example lets make 10 goblins:

```{r}

goblins <- targets(n = 10, 
                   name = "goblin", 
                   HP = 15, 
                   ability_modifier = 2,
                   proficiency_bonus = 0)

knitr::kable(goblins)

```

### Multiple inputs

We can also enter vector inputs if there are multiple enemy types. For example, lets make 5 goblins and 5 orcs, which have different stats:

```{r}

enemies <- targets(n = c(5,5), 
                name = c("goblin", "orc"), 
                ability_modifier = c(2, 1),
                proficiency_bonus = c(0,0),
                HP = c(15, 25))

knitr::kable(enemies)
```

We can see that the different enemy types have different stats, and are named appropriately (goblin 1, goblin 2, goblin 3, etc.).

# Fireball function

Now that we have our enemies, lets create a function to make them explode! The fireball() function will take the following inputs:

-   targets = dataframe of targets that will be hit by fireball

-   DC = the caster's Difficulty Class (higher DC -\> more likely the spell does more damage)

-   spell_lvl = the level that the caster chooses to cast fireball at (higher spell_lvl -\> more damage)

```{r}

source(here("R", "fireball.R"))

```

Let's test our spell on the goblins and orcs we created before.

```{r}

crispy_enemies <- enemies |>
  fireball()

knitr::kable(crispy_enemies)
```

If we scroll right, we can see that things have happened, but that's a lot of information. Lets make a new function, clean_dead(), to remove dead enemies from the battlefield and clean up the data.

### Clean dead function

```{r}

source(here("R", "clean_dead.R"))

crispy_enemies <- crispy_enemies |>
  clean_dead()

knitr::kable(crispy_enemies)

```

We can see that there are less enemies than we started with, as some of them were killed by the fireball. Additionally, their HP has been updated according to the damage they took.

# Simulating many fireballs

Lets create and test fireball on a bunch of enemies with different stats, and plot our results. We'll have a goblin group, a demonic group (resistant to fire), and an undead group (vulnerable to fire), each with three different enemy types that have their own HP and modifiers.

```{r}

goblins <- targets(
  n = c(30, 10, 5), 
  HP = c(10, 20, 50), 
  proficiency_bonus = c(1, 0, 0), 
  ability_modifier = c(3, 2, 0),
  name = c("Goblin", "Orc", "Ogre")
) |>
    mutate(army = "Goblin Horde")

demons <- targets(
  n = c(30, 10, 5), 
  HP = c(10, 20, 50), 
  proficiency_bonus = c(0, 1, 0), 
  ability_modifier = c(3, 2, 2),
  name = c("Imp", "Hell Hound", "Demon Lord"),
  resistances = "Fire"
) |>
  mutate(army = "Demonic Legion")

undead <- targets(
  n = c(30, 10, 5),
  HP = c(10, 20, 50),
  proficiency_bonus = c(0, 0, 1),
  ability_modifier = c(0, 0, 2),
  name = c("Zombie", "Ghoul", "Lich"),
  vulnerabilities = "Fire"
) |>
  mutate(army = "Undead Swarm")

enemies <- rbind(goblins, demons, undead) |>
  mutate(species = factor(species, levels = c("Goblin", "Orc", "Ogre", "Imp", "Hell Hound", "Demon Lord", "Zombie", "Ghoul", "Lich")),
         army = factor(army, levels = c("Goblin Horde", "Demonic Legion", "Undead Swarm")))

```

## For loops and purrr

We can use for loops and purrr to run the fireball() function for each individual enemy, and combine the results into a dataframe.

```{r}
num_enemies = nrow(enemies) # determine length of the enemies data frame
fireball_list = vector("list", length = nrow(enemies)) # initialize blank list to store fireball

# for loop to run fireball function
for (i in 1:num_enemies) {
 fireball_effect = fireball(enemies[i,])
 fireball_list[[i]] = fireball_effect
}

fireball_list_df = bind_rows(fireball_list) # turn list into dataframe


# purrr to run fireball function
fireball_list2 <- map(1:nrow(enemies), ~ fireball(enemies[.x, ]))
fireball_list_df2 <- bind_rows(fireball_list) # Combine list elements into a dataframe

```

## 1,000 simulations

Alternatively, we can input the whole dataframe and run the function on the entire dataset at once. Doing this 1,000 times, we can find and plot the average damage taken for each enemy type. 

### Plotting average damage by enemy type

```{r}

# Simulate 1,000 fireball scenarios
simulated_fireball <- replicate(1000, fireball(enemies), simplify = FALSE)

# Convert list of dataframes into a single dataframe
fireball_df <- bind_rows(simulated_fireball)

# Summarize the data by species (average damage per enemy type)
summarized_fireball <- fireball_df %>%
  group_by(army, species) %>%
  summarise(
    avg_dmg = mean(dmg),
    .groups = 'drop'
  )

# Plot average damage dealt to each target type
ggplot(summarized_fireball, aes(x = species, y = avg_dmg, fill = army)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(
    title = "Average Fireball Damage by Enemy Type (Simulated 1,000 Scenarios)",
    x = "Target",
    y = "Average Damage Taken",
    fill = "Enemy Group"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_manual(values = c("Goblin Horde" = "yellowgreen", "Demonic Legion" = "firebrick", "Undead Swarm" = "thistle4"))


```
As we can see, the fire resistance of the demons and the fire vulnerability of the undead played a major role in the amount of damage they took. We can also see smaller effects of the other modifiers within each enemy group. 

Let's account for the target's starting HP by calculating and plotting each enemy type's probability of surviving a fireball.

### Plotting probability of surviving fireball by enemy type

```{r}

# Calculate survival probabilities
survival_probabilities <- fireball_df %>%
  group_by(species, army) %>%
  summarise(
    survival_rate = mean(alive),
    .groups = 'drop'
  )

# Plot survival probabilities
ggplot(survival_probabilities, aes(x = species, y = survival_rate, fill = army)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(
    title = "Survival Probability by Enemy Type (Simulated 1,000 Scenarios)",
    x = "Target Species",
    y = "Survival Probability",
    fill = "Enemy Group"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_manual(values = c("Goblin Horde" = "yellowgreen", "Demonic Legion" = "firebrick", "Undead Swarm" = "thistle4"))

```

We can see that enemies with higher HP (i.e. Ogres) have a much higher probability of surviving a fireball attack than enemies with lower HP (i.e. Goblins). The other modifiers, particularly the fire resistance and vulnerabilities, also seem be significant.

